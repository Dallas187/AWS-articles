{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template AutoScalingMultiAZWithNotifications: Create a multi-az, load balanced and Auto Scaled sample web site running on an IIS web server. The application is configured to span all Availability Zones in the region and is Auto-Scaled based on the CPU utilization of the web servers.The instances are load balanced with a simple health check against the default web page.",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "KeyName" : {
      "Default" : "N-Virginia",
      "Description" : "The EC2 Key Pair to allow SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "SourceCidrForRDP" : {
      "Description" : "IP Cidr from which you are likely to RDP into the instances. You can add rules later by modifying the created security groups e.g. 54.32.98.160/32",
      "Type" : "String",
      "Default" : "124.149.118.60/32",
      "MinLength" : "9",
      "MaxLength" : "18",
      "AllowedPattern" : "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$"
    }
  },

  "Mappings" : {
    "AWSRegion2AMI" : {
      "us-east-1"        : {"Windows2008r2" : "ami-b63e18de", "Windows2012r2" : "ami-ac3a1cc4"},
      "us-west-2"        : {"Windows2008r2" : "ami-fd604dcd", "Windows2012r2" : "ami-7f634e4f"},
      "us-west-1"        : {"Windows2008r2" : "ami-7344a337", "Windows2012r2" : "ami-f544a3b1"},
      "eu-west-1"        : {"Windows2008r2" : "ami-c563feb2", "Windows2012r2" : "ami-5d62ff2a"},
      "eu-central-1"     : {"Windows2008r2" : "ami-30566b2d", "Windows2012r2" : "ami-62566b7f"},
      "ap-northeast-1"   : {"Windows2008r2" : "ami-db1bf1db", "Windows2012r2" : "ami-3118f231"},
      "ap-southeast-1"   : {"Windows2008r2" : "ami-a488bef6", "Windows2012r2" : "ami-0089bf52"},
      "ap-southeast-2"   : {"Windows2008r2" : "ami-ab1b6b91", "Windows2012r2" : "ami-dd1b6be7"},
      "sa-east-1"        : {"Windows2008r2" : "ami-a7942cba", "Windows2012r2" : "ami-9f922a82"},
      "cn-north-1"       : {"Windows2008r2" : "ami-3638aa0f", "Windows2012r2" : "ami-3a38aa03"}
    }
  },

  "Resources": {
    "rdsdbinstance1": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AutoMinorVersionUpgrade": "true",
        "DBInstanceClass": "db.m1.small",
        "Port": "1433",
        "AllocatedStorage": "200",
        "BackupRetentionPeriod": "7",
        "DBName": "MyDatabase",
        "Engine": "sqlserver-se",
        "EngineVersion": "11.00.2100.60.v1",
        "LicenseModel": "license-included",
        "MasterUsername": "mperdeck",
        "MasterUserPassword": "MyPassword",
        "PreferredBackupWindow": "03:25-03:55",
        "PreferredMaintenanceWindow": "mon:05:26-mon:05:56",
        "VPCSecurityGroups": [
          {
            "Ref": "sgrdslaunchwizard2"
          }
        ],
        "DBSubnetGroupName": {
          "Ref": "dbsubnetdefault"
        }
      }
    },
    "dbsubnetdefault": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "default",
        "SubnetIds": [
          "subnet-2f1c7858",
          "subnet-c9064ef3",
          "subnet-1965c732",
          "subnet-b3fc79ea"
        ]
      }
    },
    "sgrdslaunchwizard2": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Created from the RDS Management Console",
        "VpcId": "vpc-9d6921f8",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "1433",
            "ToPort": "1433",
            "CidrIp": "124.149.118.60/32"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "ingress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgrdslaunchwizard2"
        },
        "IpProtocol": "tcp",
        "FromPort": "1433",
        "ToPort": "1433",
        "CidrIp": "124.149.118.60/32"
      }
    },
    "egress1": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgrdslaunchwizard2"
        },
        "IpProtocol": "-1",
        "CidrIP": "0.0.0.0/0"
      }
    },
    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "3",
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "false"
        }
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
	  "Metadata" : {
		"AWS::CloudFormation::Init" : {
		  "config" : {
			"files" : {
			  "c:\\inetpub\\Test\\index.html" : {
				"content": { "Fn::Join" : ["", [
				  "<html>\n",
				  "<body>\n",
				  "<h1>Cloud formation works</h1>\n",
				  "</body>\n",
				  "</html>\n"
				]]}
			  }
			}
		  }
		} 
	  },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, "Windows2008r2" ]},
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "InstanceType" : { "Ref" : "InstanceType" },
		  "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
			"<script>\n",
			  "cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r LaunchConfig --region ", {"Ref" : "AWS::Region"}, "\n",
			"</script>\n",
			"<powershell>\n",
				"add-windowsfeature web-webserver -includeallsubfeature -logpath $env:temp\\webserver_addrole.log \n",
				"add-windowsfeature web-mgmt-tools -includeallsubfeature -logpath $env:temp\\mgmttools_addrole.log \n",
				"New-WebAppPool \"v4.0\" -force \n",
				"Set-ItemProperty \"IIS:\\AppPools\\v4.0\" managedRuntimeVersion \"v4.0\" \n",
				"new-website -name Test -port 80 -physicalpath c:\\inetpub\\Test -ApplicationPool \"v4.0\" -force \n",
				"remove-website -name \"Default Web Site\" \n",
				"start-website -name Test \n",
			"</powershell>\n"
		  ]] } }
  	    }
    },

    "WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
    "WebServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },

    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "CrossZone" : "true",
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable RDP, and HTTP from the load balancer only",
        "SecurityGroupIngress" : [ 
		{
		  "IpProtocol" : "tcp", 
		  "FromPort" : "3389", 
		  "ToPort" : "3389", 
		  "CidrIp" : { "Ref" : "SourceCidrForRDP" }
		},
        {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
          "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
        } ]
      }
    },
	"DNS": {
	  "Type": "AWS::Route53::HostedZone",
	  "Properties": {
		"HostedZoneConfig": {
		  "Comment": "My hosted zone for example.com"
		},
		"Name": "aspdotnetperformance.org."
	  }
	},
    "dnsaspdotnetperformanceorg": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": { "Ref": "DNS" },
        "RecordSets": [
          {
            "Name": "aspdotnetperformance.org.",
            "Type": "A",
            "ResourceRecords": [

            ],
            "AliasTarget": {
              "HostedZoneId": "Z35SXDOTRQ7X7K",
              "DNSName": "dualstack.awseb-e-7-awsebloa-vju66xqqrg7w-1467309377.us-east-1.elb.amazonaws.com"
            }
          }
        ]
      }
    }
  },

  "Outputs" : {
    "URL" : {
      "Description" : "The URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}
    }
  }
}
