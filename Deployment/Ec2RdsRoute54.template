{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template AutoScalingMultiAZWithNotifications: Create a multi-az, load balanced and Auto Scaled sample web site running on an IIS web server. The application is configured to span all Availability Zones in the region and is Auto-Scaled based on the CPU utilization of the web servers.The instances are load balanced with a simple health check against the default web page.",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "KeyName" : {
      "Default" : "N-Virginia",
      "Description" : "The EC2 Key Pair to allow RDP access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "AdminCidr" : {
      "Description" : "IP Cidr that is allowed to RDP to EC2 instances and SSMS into RDS instances",
      "Type" : "String",
      "Default" : "124.171.5.210/32",
      "MinLength" : "9",
      "MaxLength" : "18",
      "AllowedPattern" : "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$"
    },

    "DBInstanceClass" : {
      "Description" : "The name of the compute and memory capacity class of the DB instance.",
      "Type" : "String",
      "Default" : "db.m1.small",
      "AllowedValues" : ["db.m1.small","db.m1.medium","db.m1.large","db.m1.xlarge","db.m3.medium","db.m3.large","db.m3.xlarge","db.m3.2xlarge","db.r3.large","db.r3.xlarge","db.r3.2xlarge","db.m2.xlarge","db.m2.2xlarge","db.m2.4xlarge"],
      "ConstraintDescription" : "must be a valid database server instance type."
    },

    "AllocatedStorage" : {
      "Description" : "The allocated storage size specified in gigabytes (GB).",
      "Type" : "Number",
      "Default" : "200",
      "MinValue" : "200",
      "ConstraintDescription" : "Allocated storage must be at least 200GB."
    },

    "OptionGroupName" : {
      "Description" : "Option group with mirroring option.",
      "Type" : "String",
      "Default" : "sqlserver-mirroring"
    },

    "MasterUsername" : {
      "Description" : "The master user name for the database instance.",
      "Type" : "String",
      "Default" : "mperdeck"
    },

    "MasterUserPassword" : {
      "Description" : "The master password for the database instance.",
      "Type" : "String",
	  "NoEcho" : "true",
      "Default" : "Slameer1!"
    },
	
	 "DeploymentBucketName" : {
      "Default" : "mperdeck-releases",
      "Description" : "Name of bucket containing the zip file with deployed files.",
      "Type" : "String"
    },
	
	 "WebsiteDomain" : {
      "Default" : "aspdotnetperformance.org",
      "Description" : "Domain of the web site, using Route 53.",
      "Type" : "String"
    },
	
	 "Version" : {
      "Description" : "Version to be deployed. This doubles as the key of the zip file with deployed files.",
      "Type" : "String"
    }
  },

  "Mappings" : {
    "AWSRegion2AMI" : {
      "us-east-1"        : {"Windows2008r2" : "ami-b63e18de", "Windows2012r2" : "ami-ac3a1cc4"},
      "us-west-2"        : {"Windows2008r2" : "ami-fd604dcd", "Windows2012r2" : "ami-7f634e4f"},
      "us-west-1"        : {"Windows2008r2" : "ami-7344a337", "Windows2012r2" : "ami-f544a3b1"},
      "eu-west-1"        : {"Windows2008r2" : "ami-c563feb2", "Windows2012r2" : "ami-5d62ff2a"},
      "eu-central-1"     : {"Windows2008r2" : "ami-30566b2d", "Windows2012r2" : "ami-62566b7f"},
      "ap-northeast-1"   : {"Windows2008r2" : "ami-db1bf1db", "Windows2012r2" : "ami-3118f231"},
      "ap-southeast-1"   : {"Windows2008r2" : "ami-a488bef6", "Windows2012r2" : "ami-0089bf52"},
      "ap-southeast-2"   : {"Windows2008r2" : "ami-ab1b6b91", "Windows2012r2" : "ami-dd1b6be7"},
      "sa-east-1"        : {"Windows2008r2" : "ami-a7942cba", "Windows2012r2" : "ami-9f922a82"},
      "cn-north-1"       : {"Windows2008r2" : "ami-3638aa0f", "Windows2012r2" : "ami-3a38aa03"}
    }
  },

  "Resources": {
    "DbInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
		"OptionGroupName": { "Ref" : "OptionGroupName" },
        "AutoMinorVersionUpgrade": "true",
        "DBInstanceClass": { "Ref" : "DBInstanceClass" },
        "Port": "1433",
        "AllocatedStorage": { "Ref" : "AllocatedStorage" },
        "BackupRetentionPeriod": "7",
        "Engine": "sqlserver-se",
        "EngineVersion": "11.00.2100.60.v1",
        "LicenseModel": "license-included",
        "MasterUsername": { "Ref" : "MasterUsername" },
        "MasterUserPassword": { "Ref" : "MasterUserPassword" },
		"DBSubnetGroupName": { "Ref": "DBSubnetGroup" },
        "VPCSecurityGroups": [
          { "Ref": "SSMSSecurityGroup" }
        ]
      },
	  "DeletionPolicy" : "Snapshot"
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "default",
        "SubnetIds": [
          "subnet-2f1c7858",
          "subnet-c9064ef3",
          "subnet-1965c732",
          "subnet-b3fc79ea"
        ]
      }
    },
    "SSMSSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSMS only",
        "VpcId": "vpc-9d6921f8",
        "SecurityGroupIngress" : [ 
		{
		  "IpProtocol" : "tcp", 
          "FromPort": "1433",
          "ToPort": "1433",
		  "CidrIp" : { "Ref" : "AdminCidr" }
		} ]
      }
    },
	
	"InstanceRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/"
         }
      },
      "RolePolicies":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"S3Download",
            "PolicyDocument":{
               "Statement":[
                  {
                     "Action":[
                        "s3:GetObject"
                     ],
                     "Effect":"Allow",
                     "Resource": { "Fn::Join" : ["", [
						"arn:aws:s3:::", { "Ref" : "DeploymentBucketName" }, "/", { "Ref" : "Version" }, ".zip"]]}
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"InstanceRole"
               }
            ]
         }
      },
      "InstanceProfile":{
         "Type":"AWS::IAM::InstanceProfile",
         "Properties":{
            "Path":"/",
            "Roles":[
               {
                  "Ref":"InstanceRole"
               }
            ]
         }
      },

  "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "3",
		"Tags" : [ {
			 "Key" : "Version",
			 "Value" : { "Ref" : "Version" },
			 "PropagateAtLaunch" : "true"
        } ],
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "false"
        }
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
	  "Metadata" : {
		"Version" : { "Ref" : "Version" },
		"AWS::CloudFormation::Authentication" : {
          "default" : {
            "type" : "s3",
            "buckets" : [{ "Ref" : "DeploymentBucketName" }],
            "roleName" : { "Ref" : "InstanceRole" }
           }
        },
		"AWS::CloudFormation::Init" : {
		  "config" : {
			"sources" : {
				"c:\\inetpub\\deploy" : { "Fn::Join" : ["", [
						"https://", { "Ref" : "DeploymentBucketName" }, ".s3.amazonaws.com/", { "Ref" : "Version" }, ".zip"]]}
			}
		  }
		} 
	  },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, "Windows2012r2" ]},
        "SecurityGroups" : [ { "Ref" : "WebInstanceSecurityGroup" } ],
        "InstanceType" : { "Ref" : "InstanceType" },
		"IamInstanceProfile"  : { "Ref" : "InstanceProfile" },
		  "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
			"<script>\n",
			  "cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r LaunchConfig --region ", {"Ref" : "AWS::Region"}, "\n",
			"</script>\n",
			"<powershell>\n",
			"# Run all deploy.ps1 files\n",
			"$executionPolicy = Get-ExecutionPolicy\n",
			"Set-ExecutionPolicy Bypass -Scope Process -force\n",
            "get-childitem c:\\inetpub\\deploy -recurse -force | ?{$_.name -eq \"deploy.ps1\"} | \n",
            "    ForEach-Object { Invoke-Expression \"$($_.FullName)",
			" -version '", {"Ref" : "Version"}, "'",
			" -dbServer '", {"Fn::GetAtt" : ["DbInstance", "Endpoint.Address"]}, "'",
			" -dbUsername '", {"Ref" : "MasterUsername"}, "'",
			" -dbPassword '", {"Ref" : "MasterUserPassword"}, "'\" }\n",
			"Set-ExecutionPolicy $executionPolicy -Scope Process -force\n",
            "# Clean up the deploy directory\n",
			"Get-ChildItem c:\\inetpub\\deploy -Recurse | Remove-Item -force -Recurse\n",
			"</powershell>\n"
		  ]] } }
  	    }
    },

    "WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
    "WebServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },

    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "CrossZone" : "true",
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },

    "WebInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable RDP, and HTTP from the load balancer only",
        "SecurityGroupIngress" : [ 
		{
		  "IpProtocol" : "tcp", 
		  "FromPort" : "3389", 
		  "ToPort" : "3389", 
		  "CidrIp" : { "Ref" : "AdminCidr" }
		},
        {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
          "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
        } ]
      }
    },

	"HostedZone": {
	  "Type": "AWS::Route53::HostedZone",
	  "Properties": {
		"HostedZoneConfig": {
		  "Comment": "My hosted zone for example.com"
		},
		"Name": { "Fn::Join" : ["", [ { "Ref" : "WebsiteDomain" }, "." ]]}
	  }
	},
    "RecordSetGroup": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneId": { "Ref": "HostedZone" },
        "RecordSets": [
          {
            "Name": { "Fn::Join" : ["", [ { "Ref" : "WebsiteDomain" }, "." ]]},
            "Type": "A",
            "ResourceRecords": [

            ],
            "AliasTarget": {
              "HostedZoneId": {"Fn::GetAtt" : ["ElasticLoadBalancer", "CanonicalHostedZoneNameID"]},
              "DNSName": {"Fn::GetAtt" : ["ElasticLoadBalancer", "DNSName"]}
            }
          }
        ]
      }
    }
  },

  "Outputs" : {
    "URL" : {
      "Description" : "The URL of the load balancer",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}
    }
  }
}
