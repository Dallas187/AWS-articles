
Param(
  [Parameter(Mandatory=$True, HelpMessage="Version name of this deployment. Typically the version number generated by for example TeamCity")]
  [string]$version,

  [Parameter(Mandatory=$True, HelpMessage="The name of the CloudFormation stack")]
  [string]$stackName,

  [Parameter(Mandatory=$True, HelpMessage="S3 bucket where the deployment files will be stored")]
  [string]$bucketName,

  [Parameter(Mandatory=$True, HelpMessage="Path of the template file")]
  [string]$templatePath,

  [Parameter(Mandatory=$True, HelpMessage="Path to the csproj file of the web site to be deployed")]
  [string]$csProjPath
)

Function exists-bucket([string]$bucketName)
{
	Return (Get-S3Bucket -BucketName $bucketName | measure).Count -ne 0
}

# Uploads a file to an S3 bucket.
Function upload-bucket-object([string]$bucketName, [string]$filePath, [string]$keyName)
{
	if (!(exists-bucket $bucketName)) 
    { 
        New-S3Bucket -BucketName $bucketName 
    }
	Write-S3Object -BucketName $bucketName -Key $keyName -File $filePath
}

Function get-stack-status([string]$stackName)
{
	Try
	{
        $stack = Get-CFNStack -StackName $stackName
        Return $stack.StackStatus
	}
	Catch
	{
        Return "DOES NOT EXIST"
	}
}

# Wait until the given stack has reached any of the given status'
# Returns the current status of the stack (which will be one of the status' passed in).
Function waitfor-stack-status([string]$stackName, [string[]]$stackStatuses)
{
    $stackStatus = get-stack-status($stackName)
    while ($stackStatuses -NotContains $stackStatus) 
    { 
        Start-Sleep -s 5 
        $stackStatus = get-stack-status $stackName
    }

    Return $stackStatus
}

# Terminates all EC2 instances that below to the given stack
Function terminate-ec2-by-stack([string]$stackName)
{
	Get-EC2Instance | select -expandproperty RunningInstance | `
        where-object { $_.Tags | where-object { $_.Key -eq "aws:cloudformation:stack-name" -and $_.Value -eq $stackName } } | `
        foreach { Stop-EC2Instance -instance $_.InstanceId -Terminate }
}

Function exists-stack([string]$stackName)
{
	$found = $TRUE
	Try
	{
		# throws an exception when stack does not exist
		Get-CFNStack -StackName $stackName
	}
	Catch
	{
		$found = $FALSE
	}

	Return $found
}

# $stackName - name of the stack. You can use this function to both update a stack and to create a new one.
# $version - version of the web site
# $bucketName - S3 bucket where the deployment files will be stored
# $templatePath - path of the template file
Function launch-stack([string]$stackName, [string]$version, [string]$bucketName, [string]$templatePath)
{
	# parameter DeploymentBucketNameParameter
	$deploymentBucketNameParameter = new-object Amazon.CloudFormation.Model.Parameter    
	$deploymentBucketNameParameter.ParameterKey = "DeploymentBucketName"
	$deploymentBucketNameParameter.ParameterValue = $bucketName

	# parameter Version
	$versionParameter = new-object Amazon.CloudFormation.Model.Parameter    
	$versionParameter.ParameterKey = "Version"
	$versionParameter.ParameterValue = $version

	$template = [system.io.file]::ReadAllText($templatePath)
    $stackExistedPrior = exists-stack $stackName

	if ($stackExistedPrior)
	{
        Write-Host "Updating stack $stackName"
		Update-CFNStack `
			-StackName $stackName `
			-Capability @( "CAPABILITY_IAM" ) `
			-Parameter @( $deploymentBucketNameParameter, $versionParameter ) `
			-TemplateBody $template
	}
	else
	{
        Write-Host "Creating new stack $stackName"
		New-CFNStack `
			-StackName $stackName `
			-Capability @( "CAPABILITY_IAM" ) `
			-Parameter @( $deploymentBucketNameParameter, $versionParameter ) `
			-TemplateBody $template
	}

    # Wait until the stack operation is finished (whether succeeded or failed)
    $successStatuses = "CREATE_COMPLETE", "UPDATE_COMPLETE", "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS"
    $failStatuses = "CREATE_FAILED", "ROLLBACK_COMPLETE", "ROLLBACK_FAILED", "UPDATE_ROLLBACK_COMPLETE", `
                        "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS", "UPDATE_ROLLBACK_FAILED", "UPDATE_ROLLBACK_IN_PROGRESS"
    $finalStackStatuses = $successStatuses + $failStatuses

    $stackStatus = waitfor-stack-status $stackName $finalStackStatuses
    $success = ($successStatuses -contains $stackStatus)

    # If we just did an update, and that update went fine, terminate all ec2 instances
    # in the stack. The auto scaling group will then create new instances which will have the
    # new code base.
    if ($success -and $stackExistedPrior)
    {
        Write-Host "Terminating old ec2 instances for stack $stackName, so new ones with the new code will be spun up."
        terminate-ec2-by-stack $stackName
    }

    Return $success
}


# $stackName - the name of the CloudFormation stack
# $templatePath - path of the template file
# $csProjPath - path to the csproj file of the web site to be deployed
# $version - version of the web site
# $bucketName - S3 bucket where the deployment files will be stored
#
# Returns $True if deployment went good, $False otherwise
Function upload-deployment([string]$version, [string]$stackName, [string]$templatePath, [string]$csProjPath, [string]$bucketName)
{
	$tempDir = $env:temp + '\' + [system.guid]::newguid().tostring()
	$releaseZip = "$tempDir\Release.zip"

	msbuild $csProjPath /t:Package /p:Configuration=Release /p:PackageLocation=$releaseZip /p:AutoParameterizationWebConfigConnectionStrings=False

    # If the last command failed (that is, msbuild), return $False
    # See http://stackoverflow.com/questions/4010763/msbuild-in-a-powershell-script-how-do-i-know-if-the-build-succeeded
    if (! $?) { Return $False }

    Try {
	    # Specify that commands in this script will use credentials from credential store "teamcity" and apply to us-east-1
	    # See http://docs.aws.amazon.com/powershell/latest/userguide/specifying-your-aws-credentials.html
	    Initialize-AWSDefaults -ProfileName teamcity -Region us-east-1

	    # Upload deployment file to S3 bucket where it will be picked up by CloudFormation template
	    upload-bucket-object $bucketName $releaseZip "$version.zip"

        $success = launch-stack $stackName $version $bucketName $templatePath
        Return $success
    }
    Finally {
	    # Remove the temp dir and everything in it
	    Get-ChildItem $tempDir -Recurse | Remove-Item -force -Recurse
    }
}

set-strictmode -version Latest
Add-Type -Path "C:\Program Files (x86)\AWS SDK for .NET\bin\Net45\AWSSDK.dll"
upload-deployment $version $stackName $templatePath $csProjPath $bucketName



#launch-stack $stackName $version $bucketName $templatePath

<#
$csProjPath = "D:\Dev\AWS-articles\SimpleSiteWithDb\SimpleSiteWithDb\SimpleSiteWithDb.csproj"
$version = "1.38"
$bucketName = "mperdeck-releases"
$stackName = "ii6b"
$templatePath = "D:\Dev\AWS-articles\articles\AWS Cloudformation - load balanced, auto scaled IIS web site\LoadBalancedAutoScaledIISsiteWithDbAndRoute53AndUpload\LoadBalancedAutoScaledIISsiteWithDbAndRoute53AndUpload - no db.template"

launch-stack $stackName $version $bucketName $templatePath
# upload-deployment $csProjPath $version $bucketName

cd ""
.\

Param(
  [Parameter(Mandatory=$True, HelpMessage="Version name of this deployment. Typically the version number generated by for example TeamCity")]
  [string]$version,

  [Parameter(Mandatory=$True, HelpMessage="The name of the CloudFormation stack")]
  [string]$stackName,

  [Parameter(Mandatory=$True, HelpMessage="S3 bucket where the deployment files will be stored")]
  [string]$bucketName,

  [Parameter(Mandatory=$True, HelpMessage="Path of the template file")]
  [string]$templatePath,

  [Parameter(Mandatory=$True, HelpMessage="Path to the csproj file of the web site to be deployed")]
  [string]$csProjPath
)




cd "D:\Dev\AWS-articles\Deployment"

.\publish.ps1 3 teststack4b mperdeck-releases D:\Dev\AWS-articles\Deployment\Ec2RdsRoute54.template D:\Dev\AWS-articles\SimpleSiteWithDb\SimpleSiteWithDb\SimpleSiteWithDb.csproj



#>




