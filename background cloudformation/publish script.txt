
Function exists-bucket([string]$bucketName)
{
	Return (Get-S3Bucket -BucketName $bucketName | measure).Count -ne 0
}

Function upload-bucket([string]$bucketName, [string]$filePath, [string]$keyName)
{
	if (!(exists-bucket($bucketName))) { New-S3Bucket -BucketName $bucketName }
	Write-S3Object -BucketName $bucketName -Key "$keyName.zip" -File $filePath
}

Function exists-stack([string]$stackName)
{
	$found = $TRUE
	Try
	{
		# throws an exception when stack does not exist
		Get-CFNStack -StackName $stackName
	}
	Catch
	{
		$found = $FALSE
	}

	Return $found
}

# $stackName - name of the stack. You can use this function to both update a stack and to create a new one.
# $version - version of the web site
# $bucketName - S3 bucket where the deployment files will be stored
# $templatePath - path of the template file
Function launch-stack([string]$stackName, [string]$version, [string]$bucketName, [string]$templatePath)
{
	# Version tag
	$versionTag = new-object Amazon.CloudFormation.Model.Tag    
	$versionTag.Key = "Version"
	$versionTag.Value = $version

	# parameter DeploymentBucketNameParameter
	$deploymentBucketNameParameter = new-object Amazon.CloudFormation.Model.Parameter    
	$deploymentBucketNameParameter.ParameterKey = "DeploymentBucketName"
	$deploymentBucketNameParameter.ParameterValue = $bucketName

	# parameter Version
	$versionParameter = new-object Amazon.CloudFormation.Model.Parameter    
	$versionParameter.ParameterKey = "Version"
	$versionParameter.ParameterValue = $version

	$template = [system.io.file]::ReadAllText($templatePath)

	if (exists-stack($stackName))
	{
	
	
	
	}
	else
	{
		New-CFNStack `
			-StackName $stackName `
			-Capability @( "CAPABILITY_IAM" ) `
			-Parameter @( $deploymentBucketNameParameter, $versionParameter ) `
			-Tag @( $versionTag ) `
			-TemplateBody $template
	}
}


# $csProjPath - path to the csproj file of the web site to be deployed
# $version - version of the web site
# $bucketName - S3 bucket where the deployment files will be stored
Function upload-deployment([string]$csProjPath, [string]$version, [string]$bucketName)
{
	$tempDir = $env:temp + '\' + [system.guid]::newguid().tostring()
	$releaseZip = "$tempDir\Release.zip"

	msbuild $csProjPath /t:Package /p:Configuration=Release /p:PackageLocation=$releaseZip /p:AutoParameterizationWebConfigConnectionStrings=False

	# Specify that commands in this script will use credentials from credential store "teamcity" and apply to us-east-1
	# See http://docs.aws.amazon.com/powershell/latest/userguide/specifying-your-aws-credentials.html
	Initialize-AWSDefaults -ProfileName teamcity -Region us-east-1

	# Upload deployment file to S3 bucket where it will be picked up by CloudFormation template
	upload-bucket $bucketName $releaseZip $version

	# Remove the temp dir and everything in it
	Get-ChildItem $tempDir -Recurse | Remove-Item -force -Recurse
}

$csProjPath = "D:\Dev\AWS-articles\SimpleSiteWithDb\SimpleSiteWithDb\SimpleSiteWithDb.csproj"
$version = "1.38"
$bucketName = "mperdeck-releases"
$stackName = "ii5u"
$templatePath = "D:\Dev\AWS-articles\articles\AWS Cloudformation - load balanced, auto scaled IIS web site\LoadBalancedAutoScaledIISsiteWithDbAndRoute53AndUpload\LoadBalancedAutoScaledIISsiteWithDbAndRoute53AndUpload - no db.template"

launch-stack $stackName $version $bucketName $templatePath

# upload-deployment $csProjPath $version $bucketName

